@page "/updel/{id}/{mode}"
@inject StudentService studentService
@inject NavigationManager NavManager

<style>
  fieldset {
    border: 2px solid #000;
    padding-left: 20px;
    margin-bottom: 20px;
    ;
  }
</style>

<PageTitle>Update/Delete Student</PageTitle>

@if (student != null && Mode == "edit") // Update
{
  <p>Update Student with ID == @Id</p>
  <EditForm Model="@student" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
      <label for="FirstName">First Name:</label>
      <InputText id="FirstName" class="form-control" @bind-Value="student.FirstName" />
    </div>
    <div class="form-group">
      <label for="LastName">Last Name:</label>
      <InputText id="LastName" class="form-control" @bind-Value="student.LastName" />
    </div>
    <div class="form-group">
      <label for="School">School:</label>
      <InputText id="School" class="form-control" @bind-Value="student.School" />
    </div>
    <button type="submit" class="btn btn-primary">Update</button>
  </EditForm>
  @code {
  private async Task HandleValidSubmit()
  {
    await studentService.UpdateStudentAsync(student!.StudentId, student);
    NavManager.NavigateTo("/students");
  }
}
}
else if (student != null && Mode == "del")
{ // Delete
  // display student details
  <fieldset>
  <legend>Student Information</legend>
  <p>Student ID: @Id</p>
  <p>First Name: @student.FirstName</p>
  <p>Last Name: @student.LastName</p>
  <p>School: @student.School</p>
</fieldset>
  <p>Delete Student with ID == @Id</p>
  <p>Are you sure?</p>
  <button type="button" class="btn btn-danger" @onclick="HandleDeleteStudent">Delete</button>
  @code {
  private async Task HandleDeleteStudent()
  {
    await studentService.DeleteStudentAsync(student!.StudentId);
    NavManager.NavigateTo("/students");
  }
}
}
else
{
  <p>Student with ID == @Id not found</p>
}

@code {
  [Parameter]
  public string? Id { get; set; }
  [Parameter]
  public string? Mode { get; set; }
  private Student? student = new Student();
  protected override async Task OnInitializedAsync()
  {
    int intId = Convert.ToInt32(Id);
    student = await studentService.GetStudentByIdAsync(intId);
  }
}